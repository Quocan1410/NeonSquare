=== CODE BUNDLE ===


==================== FILE: .mvn\wrapper\maven-wrapper.properties ====================

wrapperVersion=3.3.4
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip



==================== FILE: .\env.example.yaml ====================

# for production

SPRING_DATASOURCE_URL: "jdbc:postgresql://<pooler-host>:6543/postgres?sslmode=require&prepareThreshold=0&preparedStatementCacheQueries=0"
SPRING_DATASOURCE_USERNAME: "postgres.<project-ref>"
SPRING_DATASOURCE_PASSWORD: "<db-password>"
CORS_ALLOWED_ORIGINS: "https://<your-vercel>.vercel.app,http://localhost:3000"



==================== FILE: .\env.yaml ====================

SPRING_DATASOURCE_URL: "jdbc:postgresql://db.vejapunmvtuixzhgtifg.supabase.co:5432/postgres?sslmode=require"
SPRING_DATASOURCE_USERNAME: "postgres"
SPRING_DATASOURCE_PASSWORD: "Abcd@.159147"
CORS_ALLOWED_ORIGINS: "https://*.vercel.app,http://localhost:3000"
MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,mappings"
MANAGEMENT_ENDPOINT_MAPPINGS_ENABLED: "true"



==================== FILE: .\pom.xml ====================

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.5</version>
    <relativePath/>
  </parent>

  <groupId>NeonSquare</groupId>
  <artifactId>backend</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>backend</name>
  <description>NeonSquare project for Spring Boot</description>

  <properties>
    <java.version>21</java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>${java.version}</maven.compiler.release>
  </properties>

  <dependencies>
    <!-- Web (includes Jackson JSON) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Data JPA -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Security -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- WebSocket (if you use it) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>

    <!-- Bean validation annotations (@Valid, @NotNull, etc.) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Health endpoints (/actuator/health) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- PostgreSQL driver (runtime only) -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Lombok (with annotation processing) -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Optional: Apache Tika core (for MIME sniffing, etc.) -->
    <dependency>
      <groupId>org.apache.tika</groupId>
      <artifactId>tika-core</artifactId>
      <version>2.9.0</version>
    </dependency>

    <!-- Optional (dev only): auto-reload in local runs -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Ensure Java 21 and Lombok annotation processing -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <release>${java.version}</release>
          <parameters>true</parameters>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!-- Spring Boot plugin (repackage as executable jar) -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <!-- keep Lombok out of the final jar -->
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>



==================== FILE: .\src\main\java\NeonSquare\backend\.env.yaml ====================

# backend/env.yaml
SPRING_DATASOURCE_URL: "jdbc:postgresql://db.vejapunmvtuixzhgtifg.supabase.co:5432/postgres?sslmode=require"
SPRING_DATASOURCE_USERNAME: "postgres"
SPRING_DATASOURCE_PASSWORD: "Abcd@.159147"
CORS_ALLOWED_ORIGINS: "https://neonsquare-pqysyzg32duy-nguyens-projects-702005ab.vercel.app,http://localhost:3000"
MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,mappings"
MANAGEMENT_ENDPOINT_MAPPINGS_ENABLED: "true"



==================== FILE: .\src\main\java\NeonSquare\backend\BackendApplication.java ====================

package NeonSquare.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(BackendApplication.class, args);
	}

}



==================== FILE: .\src\main\java\NeonSquare\backend\config\CorsConfig.java ====================

package NeonSquare.backend.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig implements WebMvcConfigurer {
  @Value("${cors.allowed-origins:http://localhost:3000}")
  private String allowed;

  @Override
  public void addCorsMappings(CorsRegistry reg) {
    reg.addMapping("/**")
      .allowedOriginPatterns(allowed.split(",")) 
      .allowedMethods("*")
      .allowedHeaders("*")
      .allowCredentials(true);
  }
}



==================== FILE: .\src\main\java\NeonSquare\backend\config\SecurityConfig.java ====================

package NeonSquare.backend.config;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import org.springframework.http.HttpMethod;

import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import org.springframework.security.web.SecurityFilterChain;

import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

/**
 * Hackathon-friendly security:
 * - CORS enabled (reads allowed origins from property/env)
 * - CSRF disabled (stateless API)
 * - All routes permitted by default (open API)
 *
 * Env/Property mapping:
 *   CORS_ALLOWED_ORIGINS="https://*.vercel.app,http://localhost:3000"
 * binds to Spring property "cors.allowed-origins"
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    // Comes from env var CORS_ALLOWED_ORIGINS → property cors.allowed-origins
    @Value("${cors.allowed-origins:*}")
    private String allowedOriginsCsv;

    @Bean
    public PasswordEncoder passwordEncoder() {
        // Present for future use; not used when all routes are permitted.
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // CORS & CSRF
            .cors(c -> c.configurationSource(corsConfigurationSource()))
            .csrf(AbstractHttpConfigurer::disable)

            // Fully stateless API (no sessions)
            .sessionManagement(s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // Open everything for the hackathon; tighten later if you add auth
            .authorizeHttpRequests(auth -> auth
                // allow preflight
                .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                // public endpoints
                .requestMatchers("/actuator/**").permitAll()
                .requestMatchers("/api/images/**").permitAll()
                .requestMatchers("/api/auth/**").permitAll()
                // everything else
                .anyRequest().permitAll()
            )

            // Avoid default basic/form login and the "generated password" log
            .httpBasic(AbstractHttpConfigurer::disable)
            .formLogin(AbstractHttpConfigurer::disable);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        List<String> origins = Arrays.stream(allowedOriginsCsv.split(","))
                                     .map(String::trim)
                                     .filter(s -> !s.isBlank())
                                     .collect(Collectors.toList());

        CorsConfiguration cfg = new CorsConfiguration();
        // Support wildcard patterns like https://*.vercel.app
        cfg.setAllowedOriginPatterns(origins.isEmpty() ? List.of("*") : origins);
        cfg.setAllowedMethods(List.of("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"));
        cfg.setAllowedHeaders(List.of("*"));
        cfg.setExposedHeaders(List.of("Location", "Content-Disposition"));
        cfg.setAllowCredentials(true);
        cfg.setMaxAge(3600L); // cache preflight for 1 hour

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", cfg);
        return source;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\controllers\AuthController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.dto.AuthResponse;
import NeonSquare.backend.dto.LoginRequest;
import NeonSquare.backend.dto.RegisterRequest;
import NeonSquare.backend.services.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"})
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<AuthResponse> register(@RequestBody RegisterRequest request) {
        AuthResponse response = authService.register(request);
        
        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.badRequest().body(response);
        }
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@RequestBody LoginRequest request) {
        AuthResponse response = authService.login(request);
        
        if (response.isSuccess()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.badRequest().body(response);
        }
    }
}




==================== FILE: .\src\main\java\NeonSquare\backend\controllers\FriendshipController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.models.Friendship;
import NeonSquare.backend.models.enums.FriendshipStatus;
import NeonSquare.backend.services.FriendshipService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/friendships")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"})
public class FriendshipController {

    private final FriendshipService service;

    public FriendshipController(FriendshipService service) {
        this.service = service;
    }

    @GetMapping
    public ResponseEntity<List<Friendship>> getAllFriendships() {
        return ResponseEntity.ok(service.getAllFriendships());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Friendship> getFriendship(@PathVariable UUID id) {
        return ResponseEntity.ok(service.getFriendshipById(id));
    }

    @PostMapping
    public ResponseEntity<Friendship> createFriendship(@RequestBody Friendship friendship) {
        return ResponseEntity.ok(service.createFriendship(friendship));
    }

    @PutMapping("/{id}/status")
    public ResponseEntity<Friendship> updateStatus(@PathVariable UUID id, @RequestParam FriendshipStatus status) {
        return ResponseEntity.ok(service.updateStatus(id, status));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteFriendship(@PathVariable UUID id) {
        service.deleteFriendship(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{userId}/accepted")
    public ResponseEntity<List<Friendship>> getAcceptedFriendships(@PathVariable UUID userId) {
        List<Friendship> friendships = service.getAcceptedFriendshipsForUser(userId);
        return ResponseEntity.ok(friendships);
    }

    @PostMapping("/accept")
    public ResponseEntity<String> acceptFriendship(
            @RequestParam UUID senderId,
            @RequestParam UUID receiverId
    ) {
        boolean success = service.acceptFriendship(senderId, receiverId);
        if (success) {
            return ResponseEntity.ok("Friendship accepted!");
        } else {
            return ResponseEntity.badRequest().body("No such friendship request found.");
        }
    }

    @DeleteMapping("/delete")
    public ResponseEntity<String> deleteFriendship(
            @RequestParam UUID senderId,
            @RequestParam UUID receiverId
    ) {
        boolean success = service.removeFriendship(senderId, receiverId);
        if (success) {
            return ResponseEntity.ok("Friendship deleted!");
        } else {
            return ResponseEntity.badRequest().body("No such friendship found.");
        }
    }

}



==================== FILE: .\src\main\java\NeonSquare\backend\controllers\GroupController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.models.Group;
import NeonSquare.backend.models.User;
import NeonSquare.backend.models.enums.GroupVisibility;
import NeonSquare.backend.repositories.GroupRepository;
import NeonSquare.backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/groups")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"})
public class GroupController {

    @Autowired
    private GroupRepository groupRepository;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public ResponseEntity<List<GroupResponse>> getAllGroups() {
        List<Group> groups = groupRepository.findAll();
        List<GroupResponse> groupResponses = groups.stream()
            .map(this::convertToGroupResponse)
            .collect(Collectors.toList());
        return ResponseEntity.ok(groupResponses);
    }

    @GetMapping("/{id}")
    public ResponseEntity<GroupResponse> getGroupById(@PathVariable UUID id) {
        return groupRepository.findById(id)
            .map(group -> ResponseEntity.ok(convertToGroupResponse(group)))
            .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<GroupResponse> createGroup(@RequestBody CreateGroupRequest request) {
        User user = userRepository.findById(request.getUserId()).orElse(null);
        if (user == null) {
            return ResponseEntity.badRequest().build();
        }

        Group group = new Group();
        group.setName(request.getName());
        group.setDescription(request.getDescription());
        group.setVisibility(GroupVisibility.valueOf(request.getVisibility()));
        group.setCreatedBy(user);
        group.setCreatedAt(java.time.LocalDateTime.now());

        Group savedGroup = groupRepository.save(group);
        return ResponseEntity.ok(convertToGroupResponse(savedGroup));
    }

    private GroupResponse convertToGroupResponse(Group group) {
        GroupResponse response = new GroupResponse();
        response.setId(group.getId());
        response.setName(group.getName());
        response.setDescription(group.getDescription());
        response.setVisibility(group.getVisibility().toString());
        response.setCreatedAt(group.getCreatedAt());
        response.setMemberCount(group.getMembers() != null ? group.getMembers().size() : 0);
        
        // Convert creator
        if (group.getCreatedBy() != null) {
            response.setCreatedBy(group.getCreatedBy().getFirstName() + " " + group.getCreatedBy().getLastName());
        }
        
        return response;
    }

    // Inner class for create group request
    public static class CreateGroupRequest {
        private UUID userId;
        private String name;
        private String description;
        private String visibility;

        // Getters and setters
        public UUID getUserId() { return userId; }
        public void setUserId(UUID userId) { this.userId = userId; }
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
        public String getVisibility() { return visibility; }
        public void setVisibility(String visibility) { this.visibility = visibility; }
    }

    // Inner class for group response
    public static class GroupResponse {
        private UUID id;
        private String name;
        private String description;
        private String visibility;
        private String createdAt;
        private String createdBy;
        private int memberCount;

        // Getters and setters
        public UUID getId() { return id; }
        public void setId(UUID id) { this.id = id; }
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
        public String getVisibility() { return visibility; }
        public void setVisibility(String visibility) { this.visibility = visibility; }
        public String getCreatedAt() { return createdAt; }
        public void setCreatedAt(java.time.LocalDateTime createdAt) { this.createdAt = createdAt.toString(); }
        public String getCreatedBy() { return createdBy; }
        public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }
        public int getMemberCount() { return memberCount; }
        public void setMemberCount(int memberCount) { this.memberCount = memberCount; }
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\controllers\ImageController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.models.Image;
import NeonSquare.backend.services.ImageService;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.UUID;

@RestController
@RequestMapping("/api/images")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"})
public class ImageController {

    private final ImageService imageService;

    public ImageController(ImageService imageService) {
        this.imageService = imageService;
    }

    @PostMapping("/upload")
    public ResponseEntity<String> uploadImage(@RequestParam("file") MultipartFile file) throws IOException {
        Image saved = imageService.saveImage(file);
        return ResponseEntity.ok("Uploaded image with ID: " + saved.getId());
    }

    @GetMapping("/{id}")
    public ResponseEntity<byte[]> getImage(@PathVariable UUID id) {
        Image image = imageService.getImage(id);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + image.getName() + "\"")
                .contentType(MediaType.parseMediaType(image.getType()))
                .body(image.getData());
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\controllers\PostController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.dto.PostResponse;
import NeonSquare.backend.dto.UserResponse;
import NeonSquare.backend.models.Post;
import NeonSquare.backend.models.User;
import NeonSquare.backend.models.enums.PostVisibility;
import NeonSquare.backend.models.enums.Status;
import NeonSquare.backend.repositories.PostRepository;
import NeonSquare.backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/posts")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"})
public class PostController {

    @Autowired
    private PostRepository postRepository;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public ResponseEntity<List<PostResponse>> getAllPosts() {
        List<Post> posts = postRepository.findAll();
        List<PostResponse> postResponses = posts.stream()
            .map(this::convertToPostResponse)
            .collect(Collectors.toList());
        return ResponseEntity.ok(postResponses);
    }

    @GetMapping("/{id}")
    public ResponseEntity<PostResponse> getPostById(@PathVariable UUID id) {
        return postRepository.findById(id)
            .map(post -> ResponseEntity.ok(convertToPostResponse(post)))
            .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<PostResponse> createPost(@RequestBody CreatePostRequest request) {
        User user = userRepository.findById(request.getUserId()).orElse(null);
        if (user == null) {
            return ResponseEntity.badRequest().build();
        }

        Post post = new Post();
        post.setContent(request.getText());
        post.setAuthor(user);
        post.setVisibility(PostVisibility.valueOf(request.getVisibility()));
        post.setCreatedAt(java.time.LocalDateTime.now());
        post.setUpdatedAt(java.time.LocalDateTime.now());
        post.setStatus(Status.ACTIVE);

        Post savedPost = postRepository.save(post);
        return ResponseEntity.ok(convertToPostResponse(savedPost));
    }

    private PostResponse convertToPostResponse(Post post) {
        PostResponse response = new PostResponse();
        response.setId(post.getId());
        response.setText(post.getContent());
        response.setVisibility(post.getVisibility().toString());
        response.setUpdateAt(post.getCreatedAt());
        // Avoid lazy loading by using safe checks
        response.setCommentCount(0); // Will be calculated separately if needed
        response.setReactionCount(0); // Will be calculated separately if needed
        
        // Convert author
        if (post.getAuthor() != null) {
            UserResponse author = new UserResponse();
            author.setId(post.getAuthor().getId());
            author.setFirstName(post.getAuthor().getFirstName());
            author.setLastName(post.getAuthor().getLastName());
            author.setEmail(post.getAuthor().getEmail());
            author.setProfilePicUrl(post.getAuthor().getProfilePic() != null ? "/api/images/" + post.getAuthor().getProfilePic().getId() : null);
            author.setOnline(true);
            author.setLastSeen("Online now");
            response.setAuthor(author);
        }
        
        return response;
    }

    // Inner class for create post request
    public static class CreatePostRequest {
        private UUID userId;
        private String text;
        private String visibility;

        // Getters and setters
        public UUID getUserId() { return userId; }
        public void setUserId(UUID userId) { this.userId = userId; }
        public String getText() { return text; }
        public void setText(String text) { this.text = text; }
        public String getVisibility() { return visibility; }
        public void setVisibility(String visibility) { this.visibility = visibility; }
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\controllers\UserController.java ====================

package NeonSquare.backend.controllers;

import NeonSquare.backend.dto.UserDTO;
import NeonSquare.backend.models.User;
import NeonSquare.backend.services.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    // NEW: List all users
    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<UserDTO>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        List<UserDTO> dtos = users.stream().map(UserDTO::new).collect(Collectors.toList());
        return ResponseEntity.ok(dtos);
    }

    // Create user (multipart: JSON string + optional file)
    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<UserDTO> createUser(
            @RequestParam("user") String user,
            @RequestPart(value = "profilePic", required = false) MultipartFile profilePic
    ) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        User createUser = mapper.readValue(user, User.class);
        User savedUser = userService.createUser(createUser, profilePic);
        return ResponseEntity.ok(new UserDTO(savedUser));
    }

    // Get one by id
    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<UserDTO> getUser(@PathVariable UUID id) {
        User user = userService.getUser(id);
        return ResponseEntity.ok(new UserDTO(user));
    }

    // Upload/replace profile picture
    @PostMapping(path = "/{id}/profile-pic", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<UserDTO> uploadProfilePic(
            @PathVariable UUID id,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        User updatedUser = userService.updateProfilePic(id, file);
        return ResponseEntity.ok(new UserDTO(updatedUser));
    }

    // Search by name; accepts q OR query OR name to be frontend-friendly
    @GetMapping(path = "/search", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<UserDTO>> searchUsers(
            @RequestParam(name = "q", required = false) String q,
            @RequestParam(name = "query", required = false) String query,
            @RequestParam(name = "name", required = false) String name
    ) {
        String term = firstNonBlank(q, query, name);
        List<User> users = (term == null || term.isBlank())
                ? List.of()
                : userService.findUsersByName(term);
        List<UserDTO> dtos = users.stream().map(UserDTO::new).collect(Collectors.toList());
        return ResponseEntity.ok(dtos);
    }

    private static String firstNonBlank(String... vals) {
        if (vals == null) return null;
        for (String v : vals) {
            if (v != null && !v.isBlank()) return v.trim();
        }
        return null;
    }

    @GetMapping(path = "/list")
public ResponseEntity<List<UserDTO>> getAllUsersAlias() {
    return getAllUsers();
}

}



==================== FILE: .\src\main\java\NeonSquare\backend\dto\AuthResponse.java ====================

package NeonSquare.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AuthResponse {
    private String token;
    private UUID userId;
    private String firstName;
    private String lastName;
    private String email;
    private String message;
    private boolean success;
}




==================== FILE: .\src\main\java\NeonSquare\backend\dto\LoginRequest.java ====================

package NeonSquare.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    private String email;
    private String password;
}




==================== FILE: .\src\main\java\NeonSquare\backend\dto\PostResponse.java ====================

package NeonSquare.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PostResponse {
    private UUID id;
    private String text;
    private UserResponse author;
    private String visibility;
    private LocalDateTime updateAt;
    private int commentCount;
    private int reactionCount;
    private List<String> imageUrls;
}




==================== FILE: .\src\main\java\NeonSquare\backend\dto\RegisterRequest.java ====================

package NeonSquare.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RegisterRequest {
    private String firstName;
    private String lastName;
    private String email;
    private String password;
}




==================== FILE: .\src\main\java\NeonSquare\backend\dto\UserDTO.java ====================

package NeonSquare.backend.dto;

import NeonSquare.backend.models.User;
import lombok.Getter;
import lombok.Setter;

import java.util.UUID;

@Getter
@Setter
public class UserDTO {
    private UUID id;
    private String firstName;
    private String lastName;
    private String email;
    private String profilePicUrl;

    public UserDTO(User user){
        id = user.getId();
        firstName = user.getFirstName();
        lastName = user.getLastName();
        email = user.getEmail();
        if (user.getProfilePic() != null) {
            this.setProfilePicUrl("/api/images/" + user.getProfilePic().getId());
        }
    }

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getProfilePicUrl() {
        return profilePicUrl;
    }

    public void setProfilePicUrl(String profilePicUrl) {
        this.profilePicUrl = profilePicUrl;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\dto\UserResponse.java ====================

package NeonSquare.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserResponse {
    private UUID id;
    private String firstName;
    private String lastName;
    private String email;
    private String profilePicUrl;
    private boolean online;
    private String lastSeen;
}




==================== FILE: .\src\main\java\NeonSquare\backend\models\Admin.java ====================

package NeonSquare.backend.models;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Admin {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    private String email;
    private String password;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Comment.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.Status;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Comment {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    private String content;

    @ManyToOne
    @JoinColumn(name = "post_id")
    private Post post;

    @ManyToOne
    @JoinColumn(name = "author_id")
    private User author;

    @OneToMany
    @JoinTable(
            name = "reaction_comment",
            joinColumns = @JoinColumn(name = "comment_id"),
            inverseJoinColumns = @JoinColumn(name = "reaction_id")
    )
    private List<Reaction> reactions;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Enumerated(EnumType.ORDINAL)
    private Status status;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Post getPost() {
        return post;
    }

    public void setPost(Post post) {
        this.post = post;
    }

    public List<Reaction> getReactions() {
        return reactions;
    }

    public void setReactions(List<Reaction> reactions) {
        this.reactions = reactions;
    }

    public User getAuthor() {
        return author;
    }

    public void setAuthor(User author) {
        this.author = author;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\FriendshipStatus.java ====================

package NeonSquare.backend.models.enums;

public enum FriendshipStatus {
    PENDING,
    ACCEPTED,
    REJECTED,
    BLOCKED
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\GroupVisibility.java ====================

package NeonSquare.backend.models.enums;

public enum GroupVisibility {
    PUBLIC,
    PRIVATE
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\NotificationStatus.java ====================

package NeonSquare.backend.models.enums;

public enum NotificationStatus {
    New,
    Seen
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\NotificationType.java ====================

package NeonSquare.backend.models.enums;

public enum NotificationType {
    friendRequest,
    postUpdate,
    groupCreation,
    memberRequest
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\PostVisibility.java ====================

package NeonSquare.backend.models.enums;

public enum PostVisibility {
    PUBLIC,     // 0
    FRIENDS,    // 1
    PRIVATE     // 2
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\ReactionType.java ====================

package NeonSquare.backend.models.enums;

public enum ReactionType {
    LIKE,
    LOVE,
    HAHA,
    WOW,
    SAD,
    ANGRY
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\enums\Status.java ====================

package NeonSquare.backend.models.enums;

public enum Status {
    ACTIVE,
    INACTIVE,
    PENDING,
    DELETED
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Friendship.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.FriendshipStatus;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDateTime;
import java.util.UUID;
@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Friendship {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    @OneToOne
    private User sender;

    @OneToOne
    private User receiver;

    @Enumerated(EnumType.STRING)
    private FriendshipStatus status;

    @Column(name = "created_at")
    private LocalDateTime createdAt;


    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public User getSender() {
        return sender;
    }

    public void setSender(User sender) {
        this.sender = sender;
    }

    public FriendshipStatus getStatus() {
        return status;
    }

    public void setStatus(FriendshipStatus status) {
        this.status = status;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public User getReceiver() {
        return receiver;
    }

    public void setReceiver(User receiver) {
        this.receiver = receiver;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Group.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.GroupVisibility;
import NeonSquare.backend.models.enums.Status;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.util.List;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Table(name = "user_group")
public class Group {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    @Column(nullable = false)
    private String name;

    @Column(length = 1000)
    private String description;

    @OneToOne
    private Image groupPic;

    @Enumerated(EnumType.ORDINAL)
    private GroupVisibility visibility;

    @OneToMany
    @JoinTable(
            name = "group_post",
            joinColumns = @JoinColumn(name = "group_id"),
            inverseJoinColumns = @JoinColumn(name = "post_id")
    )
    private List<Post> posts;

    @Enumerated(EnumType.ORDINAL)
    private Status status;

    @ManyToMany
    @JoinTable(
            name = "member_group",
            joinColumns = @JoinColumn(name = "group_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id")
    )
    private List<User> members;

    @OneToOne
    private User groupAdmin;

    @ManyToOne
    @JoinColumn(name = "created_by")
    private User createdBy;

    @Column(name = "created_at")
    private java.time.LocalDateTime createdAt;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public Image getGroupPic() {
        return groupPic;
    }

    public void setGroupPic(Image groupPic) {
        this.groupPic = groupPic;
    }

    public GroupVisibility getVisibility() {
        return visibility;
    }

    public void setVisibility(GroupVisibility visibility) {
        this.visibility = visibility;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void setPosts(List<Post> posts) {
        this.posts = posts;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public List<User> getMembers() {
        return members;
    }

    public void setMembers(List<User> members) {
        this.members = members;
    }

    public User getGroupAdmin() {
        return groupAdmin;
    }

    public void setGroupAdmin(User groupAdmin) {
        this.groupAdmin = groupAdmin;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public User getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(User createdBy) {
        this.createdBy = createdBy;
    }

    public java.time.LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.time.LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Image.java ====================

package NeonSquare.backend.models;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Image {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    private String name;

    @Lob
    private byte[] data;

    private String type;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public byte[] getData() {
        return data;
    }

    public void setData(byte[] data) {
        this.data = data;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Notification.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.NotificationStatus;
import NeonSquare.backend.models.enums.NotificationType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDate;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Notification {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    @OneToOne
    private User user;

    private LocalDate createDate;

    @Enumerated(EnumType.ORDINAL)
    private NotificationStatus status;

    private String content;

    @Enumerated(EnumType.ORDINAL)
    private NotificationType type;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public LocalDate getCreateDate() {
        return createDate;
    }

    public void setCreateDate(LocalDate createDate) {
        this.createDate = createDate;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public NotificationStatus getStatus() {
        return status;
    }

    public void setStatus(NotificationStatus status) {
        this.status = status;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public NotificationType getType() {
        return type;
    }

    public void setType(NotificationType type) {
        this.type = type;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Post.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.PostVisibility;
import NeonSquare.backend.models.enums.Status;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Post {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    @Column(length = 200)
    private String title;

    @Column(columnDefinition = "TEXT")
    private String content;

    @OneToMany(mappedBy = "post")
    private List<Comment> comments;

    @ManyToOne
    @JoinColumn(name = "author_id")
    private User author;

    @OneToMany
    @JoinTable(
            name = "reaction_post",
            joinColumns = @JoinColumn(name = "post_id"),
            inverseJoinColumns = @JoinColumn(name = "reaction_id")
    )
    private List<Reaction> reactions;

    @Enumerated(EnumType.ORDINAL)
    private PostVisibility visibility;

    @Enumerated(EnumType.ORDINAL)
    private Status status;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @OneToMany
    @JoinTable(
            name = "image_post",
            joinColumns = @JoinColumn(name = "post_id"),
            inverseJoinColumns = @JoinColumn(name = "image_id")
    )
    private List<Image> images;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public List<Comment> getComments() {
        return comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }

    public User getAuthor() {
        return author;
    }

    public void setAuthor(User author) {
        this.author = author;
    }

    public List<Reaction> getReactions() {
        return reactions;
    }

    public void setReactions(List<Reaction> reactions) {
        this.reactions = reactions;
    }

    public PostVisibility getVisibility() {
        return visibility;
    }

    public void setVisibility(PostVisibility visibility) {
        this.visibility = visibility;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public List<Image> getImages() {
        return images;
    }

    public void setImages(List<Image> images) {
        this.images = images;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\Reaction.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.ReactionType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class Reaction {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    @Enumerated(EnumType.ORDINAL)
    private ReactionType type;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "post_id")
    private Post post;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public ReactionType getType() {
        return type;
    }

    public void setType(ReactionType type) {
        this.type = type;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Post getPost() {
        return post;
    }

    public void setPost(Post post) {
        this.post = post;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\models\User.java ====================

package NeonSquare.backend.models;

import NeonSquare.backend.models.enums.Status;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.UuidGenerator;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Table(name = "user_account")
public class User {
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    private String firstName;

    private String lastName;

    private String email;

    private String password;

    private String major;

    private String year;

    private String gender;

    private String bio;

    @OneToOne
    private Image profilePic;

    @Enumerated(EnumType.ORDINAL)
    private Status status;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @ManyToMany(mappedBy = "members")
    private List<Group> groups;


    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Image getProfilePic() {
        return profilePic;
    }

    public void setProfilePic(Image profilePic) {
        this.profilePic = profilePic;
    }

    public List<Group> getGroups() {
        return groups;
    }

    public void setGroups(List<Group> groups) {
        this.groups = groups;
    }

    public String getMajor() {
        return major;
    }

    public void setMajor(String major) {
        this.major = major;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\CommentRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Comment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface CommentRepository extends JpaRepository<Comment, UUID> {
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\FriendshipRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Friendship;
import NeonSquare.backend.models.enums.FriendshipStatus;
import jakarta.transaction.Transactional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface FriendshipRepository extends JpaRepository<Friendship, UUID> {
    @Query("SELECT f FROM Friendship f " +
            "WHERE f.status = :status AND (f.sender.id = :userId OR f.receiver.id = :userId)")
    List<Friendship> findAcceptedFriendshipsForUser(
            @Param("status") FriendshipStatus status,
            @Param("userId") UUID userId
    );

    @Modifying
    @Transactional
    @Query("UPDATE Friendship f SET f.status = :status " +
            "WHERE f.sender.id = :senderId AND f.receiver.id = :receiverId")
    int acceptFriendship(
            @Param("senderId") UUID senderId,
            @Param("receiverId") UUID receiverId,
            @Param("status") FriendshipStatus status
    );

    @Modifying
    @Transactional
    @Query("DELETE FROM Friendship f WHERE f.sender.id = :senderId AND f.receiver.id = :receiverId")
    int deleteFriendship(
            @Param("senderId") UUID senderId,
            @Param("receiverId") UUID receiverId
    );
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\GroupRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Group;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface GroupRepository extends JpaRepository<Group, UUID> {
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\ImageRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Image;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface ImageRepository extends JpaRepository<Image, UUID> {
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\NotificationRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Notification;
import NeonSquare.backend.models.enums.NotificationStatus;
import NeonSquare.backend.models.enums.NotificationType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface NotificationRepository extends JpaRepository<Notification, UUID> {
    
    @Query("SELECT n FROM Notification n WHERE n.user.id = :userId ORDER BY n.createDate DESC")
    List<Notification> findByUserIdOrderByCreateDateDesc(@Param("userId") UUID userId);
    
    @Query("SELECT n FROM Notification n WHERE n.user.id = :userId AND n.status = :status ORDER BY n.createDate DESC")
    List<Notification> findByUserIdAndStatusOrderByCreateDateDesc(
            @Param("userId") UUID userId, 
            @Param("status") NotificationStatus status
    );
    
    @Query("SELECT n FROM Notification n WHERE n.user.id = :userId AND n.type = :type ORDER BY n.createDate DESC")
    List<Notification> findByUserIdAndTypeOrderByCreateDateDesc(
            @Param("userId") UUID userId, 
            @Param("type") NotificationType type
    );
    
    @Query("SELECT COUNT(n) FROM Notification n WHERE n.user.id = :userId AND n.status = :status")
    long countByUserIdAndStatus(@Param("userId") UUID userId, @Param("status") NotificationStatus status);
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\PostRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Post;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface PostRepository extends JpaRepository<Post, UUID> {
}




==================== FILE: .\src\main\java\NeonSquare\backend\repositories\ReactionRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.Reaction;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface ReactionRepository extends JpaRepository<Reaction, UUID> {
}



==================== FILE: .\src\main\java\NeonSquare\backend\repositories\UserRepository.java ====================

package NeonSquare.backend.repositories;

import NeonSquare.backend.models.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface UserRepository extends JpaRepository<User, UUID> {
    User findByEmail(String email);

    @Query("SELECT u FROM User u WHERE LOWER(u.firstName) LIKE LOWER(CONCAT('%', :name, '%')) OR LOWER(u.lastName) LIKE LOWER(CONCAT('%', :name, '%'))")
    List<User> searchByName(@Param("name") String name);
}



==================== FILE: .\src\main\java\NeonSquare\backend\services\AuthService.java ====================

package NeonSquare.backend.services;

import NeonSquare.backend.dto.AuthResponse;
import NeonSquare.backend.dto.LoginRequest;
import NeonSquare.backend.dto.RegisterRequest;
import NeonSquare.backend.models.User;
import NeonSquare.backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public AuthResponse register(RegisterRequest request) {
        // Check if user already exists
        if (userRepository.findByEmail(request.getEmail()) != null) {
            return new AuthResponse(null, null, null, null, null, "Email already exists", false);
        }

        // Create new user
        User user = new User();
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword()));

        User savedUser = userRepository.save(user);

        // Generate JWT token (simplified for now)
        String token = "jwt_token_" + savedUser.getId().toString();

        return new AuthResponse(
            token,
            savedUser.getId(),
            savedUser.getFirstName(),
            savedUser.getLastName(),
            savedUser.getEmail(),
            "Registration successful",
            true
        );
    }

    public AuthResponse login(LoginRequest request) {
        // Find user by email
        User user = userRepository.findByEmail(request.getEmail());

        if (user == null) {
            return new AuthResponse(null, null, null, null, null, "User not found", false);
        }

        // Check password
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            return new AuthResponse(null, null, null, null, null, "Invalid password", false);
        }

        // Generate JWT token (simplified for now)
        String token = "jwt_token_" + user.getId().toString();

        return new AuthResponse(
            token,
            user.getId(),
            user.getFirstName(),
            user.getLastName(),
            user.getEmail(),
            "Login successful",
            true
        );
    }
}




==================== FILE: .\src\main\java\NeonSquare\backend\services\FriendshipService.java ====================

package NeonSquare.backend.services;

import NeonSquare.backend.models.Friendship;
import NeonSquare.backend.models.enums.FriendshipStatus;
import NeonSquare.backend.repositories.FriendshipRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class FriendshipService {

    private final FriendshipRepository repository;

    @Autowired
    public FriendshipService(FriendshipRepository repository) {
        this.repository = repository;
    }

    public List<Friendship> getAllFriendships() {
        return repository.findAll();
    }

    public Friendship getFriendshipById(UUID id) {
        return repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Friendship not found"));
    }

    public Friendship createFriendship(Friendship friendship) {
        friendship.setStatus(FriendshipStatus.PENDING);
        return repository.save(friendship);
    }

    public Friendship updateStatus(UUID id, FriendshipStatus status) {
        Friendship friendship = getFriendshipById(id);
        friendship.setStatus(status);
        return repository.save(friendship);
    }

    public void deleteFriendship(UUID id) {
        repository.deleteById(id);
    }

    public List<Friendship> getAcceptedFriendshipsForUser(UUID userId) {
        return repository.findAcceptedFriendshipsForUser(FriendshipStatus.ACCEPTED, userId);
    }

    public boolean acceptFriendship(UUID senderId, UUID receiverId) {
        int updated = repository.acceptFriendship(senderId, receiverId, FriendshipStatus.ACCEPTED);
        return updated > 0;
    }

    public boolean removeFriendship(UUID senderId, UUID receiverId) {
        int deleted = repository.deleteFriendship(senderId, receiverId);
        return deleted > 0;
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\services\ImageService.java ====================

package NeonSquare.backend.services;

import NeonSquare.backend.models.Image;
import NeonSquare.backend.repositories.ImageRepository;
import org.apache.tika.Tika;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.UUID;

@Service
public class ImageService {

    private final ImageRepository repository;
    private final Tika tika = new Tika();

    @Autowired
    public ImageService(ImageRepository repository) {
        this.repository = repository;
    }

    @Transactional
    public Image saveImage(MultipartFile file) throws IOException {
        Image image = new Image();
        image.setName(file.getOriginalFilename());
        image.setData(file.getBytes());
        String mimeType = tika.detect(file.getBytes());
        image.setType(mimeType);

        return repository.save(image);
    }

    public Image getImage(UUID id) {
        return repository.findById(id).orElseThrow(() -> new RuntimeException("Image not found"));
    }

    @Transactional
    public Image updateImage(MultipartFile file, UUID imageId) throws IOException {
        Image image = repository.findById(imageId)
                .orElseThrow(() -> new RuntimeException("Image not found"));
        image.setName(file.getOriginalFilename());
        image.setData(file.getBytes());
        return repository.save(image);
    }

    @Transactional
    public void deleteImage(UUID imageId) throws IOException {
        Image image = repository.findById(imageId)
                .orElseThrow(() -> new RuntimeException("Image not found"));
        repository.delete(image);
    }
}



==================== FILE: .\src\main\java\NeonSquare\backend\services\UserService.java ====================

package NeonSquare.backend.services;

import NeonSquare.backend.models.Image;
import NeonSquare.backend.models.User;
import NeonSquare.backend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final ImageService imageService;

    @Autowired
    public UserService(UserRepository userRepository, ImageService imageService) {
        this.userRepository = userRepository;
        this.imageService = imageService;
    }

    @Transactional
    public User createUser(User user, MultipartFile profilePicFile) throws IOException {
        if (profilePicFile != null && !profilePicFile.isEmpty()) {
            Image image = imageService.saveImage(profilePicFile);
            user.setProfilePic(image);
        }
        return userRepository.save(user);
    }

    @Transactional(readOnly = true)
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Transactional(readOnly = true)
    public User getUser(UUID id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

    @Transactional
    public User updateProfilePic(UUID userId, MultipartFile file) throws IOException {
        User user = getUser(userId);
        if (file == null || file.isEmpty()) {
            return user; // or throw new IllegalArgumentException("Empty file");
        }
        if (user.getProfilePic() != null) {
            Image updatedImage = imageService.updateImage(file, user.getProfilePic().getId());
            user.setProfilePic(updatedImage);
        } else {
            Image image = imageService.saveImage(file);
            user.setProfilePic(image);
        }
        return userRepository.save(user);
    }

    @Transactional(readOnly = true)
    public List<User> findUsersByName(String name){
        return userRepository.searchByName(name);
    }

    // Optional alias to keep older controllers happy (if any call searchUsers)
    @Transactional(readOnly = true)
    public List<User> searchUsers(String name) {
        return findUsersByName(name);
    }
}



==================== FILE: .\src\main\resources\application.properties ====================

spring.application.name=backend

# --- Database (read from environment) ---
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate ---
# Default to 'update' in prod; override with JPA_DDL_AUTO in env.yaml if you need 'create' temporarily
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
# Dialect is auto-detected, but keeping it is fine:
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

# --- HikariCP (connection pool) ---
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=180000
spring.datasource.hikari.leak-detection-threshold=20000

# --- CORS (used by SecurityConfig via @Value("${cors.allowed-origins}") ) ---
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:*}

# --- Docker compose auto support off (not used here) ---
spring.docker.compose.enabled=false

# --- Actuator (health endpoints for Cloud Run) ---
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true

